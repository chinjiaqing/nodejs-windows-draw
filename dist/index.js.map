{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import koffi from 'koffi';\r\n\r\n// 1. 定义RECT结构体（与Windows API一致）\r\nconst RECT = koffi.struct('RECT', {\r\n  left: 'long',  // 偏移0字节（4字节）\r\n  top: 'long',   // 偏移4字节（4字节）\r\n  right: 'long', // 偏移8字节（4字节）\r\n  bottom: 'long' // 偏移12字节（4字节）\r\n});\r\n\r\n// 2. 定义类型别名（简化API调用）\r\nkoffi.alias('HWND', 'void*');\r\nkoffi.alias('HDC', 'void*');\r\nkoffi.alias('HBRUSH', 'void*');\r\nkoffi.alias('LPRECT', 'void*'); // LPRECT = 指向RECT的指针\r\n\r\n// 3. 加载Windows API库\r\nconst user32 = koffi.load('user32.dll');\r\nconst gdi32 = koffi.load('gdi32.dll');\r\n\r\n// 4. 定义API函数（严格遵循Windows API签名）\r\nconst GetDC = user32.func('HDC __stdcall GetDC(HWND hWnd)');\r\nconst ReleaseDC = user32.func('int __stdcall ReleaseDC(HWND hWnd, HDC hDC)');\r\nconst GetSystemMetrics = user32.func('int __stdcall GetSystemMetrics(int nIndex)');\r\nconst CreateSolidBrush = gdi32.func('HBRUSH __stdcall CreateSolidBrush(uint32 color)');\r\nconst FillRect = user32.func('int __stdcall FillRect(HDC hDC, LPRECT lprc, HBRUSH hbr)');\r\nconst DeleteObject = gdi32.func('int __stdcall DeleteObject(void* hObject)');\r\n\r\n// 5. 主绘制函数（实现全屏填充绿色）\r\nfunction drawFullScreenRect() {\r\n  // 获取桌面DC（null=桌面窗口，需管理员权限）\r\n  const hdc = GetDC(null);\r\n  if (!hdc) {\r\n    console.error('GetDC(NULL) 失败（需管理员权限运行）');\r\n    return;\r\n  }\r\n\r\n  // 获取屏幕尺寸（SM_CXSCREEN=0：宽度；SM_CYSCREEN=1：高度）\r\n  const width = GetSystemMetrics(0);\r\n  const height = GetSystemMetrics(1);\r\n  console.log(`屏幕尺寸：${width}x${height}`);\r\n\r\n  // -------------------------- 核心修复：正确获取底层Buffer --------------------------\r\n  // a. 分配1个RECT结构体的内存（返回koffi.Buffer，大小16字节）\r\n  const rectBuffer = koffi.alloc(RECT, 1);\r\n  // b. 获取底层Node.js Buffer（koffi@2.12.2中使用`buffer`属性）\r\n  const nodeBuffer = rectBuffer.buffer; // 关键：替换`data`为`buffer`\r\n  if (!nodeBuffer) {\r\n    console.error('无法获取底层Node.js Buffer（koffi版本不兼容）');\r\n    ReleaseDC(null, hdc);\r\n    return;\r\n  }\r\n  // c. 手动设置RECT的成员（通过Node.js Buffer的writeInt32LE方法）\r\n  nodeBuffer.writeInt32LE(0, 0);     // left = 0（偏移0字节，小端序）\r\n  nodeBuffer.writeInt32LE(0, 4);     // top = 0（偏移4字节）\r\n  nodeBuffer.writeInt32LE(width, 8);  // right = 屏幕宽度（偏移8字节）\r\n  nodeBuffer.writeInt32LE(height, 12); // bottom = 屏幕高度（偏移12字节）\r\n  // -----------------------------------------------------------------------------------\r\n\r\n  // 创建绿色画刷（Windows颜色格式为BGR，0x0000FF00=绿色）\r\n  const brush = CreateSolidBrush(0x0000FF00);\r\n  if (!brush) {\r\n    console.error('CreateSolidBrush 失败');\r\n    ReleaseDC(null, hdc);\r\n    return;\r\n  }\r\n\r\n  // 填充整个屏幕为绿色（LPRECT参数传递rectBuffer的指针）\r\n  const ret = FillRect(hdc, rectBuffer, brush);\r\n  if (ret === 0) {\r\n    console.error('FillRect 失败（错误码：', koffi.errno(), '）');\r\n  } else {\r\n    console.log('FillRect 成功（屏幕已填充为绿色）');\r\n  }\r\n\r\n  // 释放资源（避免内存泄漏）\r\n  DeleteObject(brush); // 释放画刷\r\n  ReleaseDC(null, hdc); // 释放DC\r\n  koffi.free(rectBuffer); // 释放RECT缓冲区（koffi.alloc分配的内存需手动释放）\r\n}\r\n\r\n// 运行绘制函数\r\ndrawFullScreenRect();"],"mappings":";AAAA,OAAO,WAAW;AAGlB,IAAM,OAAO,MAAM,OAAO,QAAQ;AAAA,EAChC,MAAM;AAAA;AAAA,EACN,KAAK;AAAA;AAAA,EACL,OAAO;AAAA;AAAA,EACP,QAAQ;AAAA;AACV,CAAC;AAGD,MAAM,MAAM,QAAQ,OAAO;AAC3B,MAAM,MAAM,OAAO,OAAO;AAC1B,MAAM,MAAM,UAAU,OAAO;AAC7B,MAAM,MAAM,UAAU,OAAO;AAG7B,IAAM,SAAS,MAAM,KAAK,YAAY;AACtC,IAAM,QAAQ,MAAM,KAAK,WAAW;AAGpC,IAAM,QAAQ,OAAO,KAAK,gCAAgC;AAC1D,IAAM,YAAY,OAAO,KAAK,6CAA6C;AAC3E,IAAM,mBAAmB,OAAO,KAAK,4CAA4C;AACjF,IAAM,mBAAmB,MAAM,KAAK,iDAAiD;AACrF,IAAM,WAAW,OAAO,KAAK,0DAA0D;AACvF,IAAM,eAAe,MAAM,KAAK,2CAA2C;AAG3E,SAAS,qBAAqB;AAE5B,QAAM,MAAM,MAAM,IAAI;AACtB,MAAI,CAAC,KAAK;AACR,YAAQ,MAAM,sFAA0B;AACxC;AAAA,EACF;AAGA,QAAM,QAAQ,iBAAiB,CAAC;AAChC,QAAM,SAAS,iBAAiB,CAAC;AACjC,UAAQ,IAAI,iCAAQ,KAAK,IAAI,MAAM,EAAE;AAIrC,QAAM,aAAa,MAAM,MAAM,MAAM,CAAC;AAEtC,QAAM,aAAa,WAAW;AAC9B,MAAI,CAAC,YAAY;AACf,YAAQ,MAAM,mGAAkC;AAChD,cAAU,MAAM,GAAG;AACnB;AAAA,EACF;AAEA,aAAW,aAAa,GAAG,CAAC;AAC5B,aAAW,aAAa,GAAG,CAAC;AAC5B,aAAW,aAAa,OAAO,CAAC;AAChC,aAAW,aAAa,QAAQ,EAAE;AAIlC,QAAM,QAAQ,iBAAiB,KAAU;AACzC,MAAI,CAAC,OAAO;AACV,YAAQ,MAAM,+BAAqB;AACnC,cAAU,MAAM,GAAG;AACnB;AAAA,EACF;AAGA,QAAM,MAAM,SAAS,KAAK,YAAY,KAAK;AAC3C,MAAI,QAAQ,GAAG;AACb,YAAQ,MAAM,uDAAoB,MAAM,MAAM,GAAG,QAAG;AAAA,EACtD,OAAO;AACL,YAAQ,IAAI,mFAAuB;AAAA,EACrC;AAGA,eAAa,KAAK;AAClB,YAAU,MAAM,GAAG;AACnB,QAAM,KAAK,UAAU;AACvB;AAGA,mBAAmB;","names":[]}